"""WhisperAudio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UbKXyx-p1xu_nZPwepl9CfGTZrio4pYs
"""
# follow these Installations :
#1
# !pip install git+https://github.com/openai/whisper.git
#2
# !sudo apt update && sudo apt install ffmpeg
#3
# !pip install SpeechRecognition
#4
# !pip install deep-translator

import whisper
from deep_translator import GoogleTranslator
import speech_recognition as sr
import streamlit as st


def audio_to_text():
    model = whisper.load_model("medium")
    audio_file = "audio.wav"
    # Load audio and pad/trim it to fit 30 seconds
    audio = whisper.load_audio(audio_file)
    audio = whisper.pad_or_trim(audio)

    # Make log-Mel spectrogram and move to the same device as the model
    mel = whisper.log_mel_spectrogram(audio).to(model.device)

    # Detect the spoken language
    _, probs = model.detect_language(mel)

    # Extract the language with the highest probability
    detected_language = max(probs, key=probs.get)
    print(f"Detected language: {detected_language}")

    r = sr.Recognizer()

    # Replace 'audio_file.mp3' with the path to your MP3 file


    with sr.AudioFile(audio_file) as source:
        audio = r.record(source)

    # Now you can perform speech recognition on the audio
    try:
        # Specify the language parameter to recognize multi-language audio
        # You can replace "en-US" with the appropriate language code
        # For example, "fr-FR" for French, "es-ES" for Spanish, etc.
        result=r.recognize_google(audio, language=detected_language)
        print("Transcription: " + result)
    except sr.UnknownValueError:
        print("Could not understand audio")
    except sr.RequestError as e:
        print("Could not request results; {0}".format(e))

    # Use any translator you like, in this example GoogleTranslator
    translated = GoogleTranslator(source='auto', target='en').translate(result)
    print(translated)
    dict={
        "detectedlang":detected_language,
        "Transcription":result,
        "translated":translated
        }
    return(dict)



if __name__ == "__main__":
    audio_to_text()